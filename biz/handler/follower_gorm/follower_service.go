// Code generated by hertz generator.

package follower_gorm

import (
	"context"
	"github.com/DodiNCer/tiktok/biz/dal/mysql"
	"github.com/DodiNCer/tiktok/biz/model"
	follower_gorm "github.com/DodiNCer/tiktok/biz/model/follower_gorm"
	"github.com/DodiNCer/tiktok/biz/util"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"strconv"
	"time"
)

// CreateFollower .
// @router /douyin/relation/action/ [POST]
func CreateFollower(ctx context.Context, c *app.RequestContext) {
	var err error
	var req follower_gorm.CreateFollowerRequest
	resp := new(follower_gorm.CreateFollowerResponse)
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(200, &follower_gorm.CreateFollowerResponse{StatusCode: follower_gorm.Code_ParamInvalid, StatusMsg: "非法参数"})
		return
	}

	//鉴权
	token, err := util.CheckToken(req.GetToken())
	if err != nil {
		c.JSON(200, &follower_gorm.CreateFollowerResponse{StatusCode: follower_gorm.Code_TokenErr, StatusMsg: "token验证失败"})
		return
	}

	//从token中获取user_id
	userId := token.UserId
	//从请求中获取to_user_id
	toUserUid := req.ToUserID
	//获取当前时间
	currentTime := time.Now()

	actionType := req.GetActionType()
	_, total, err := mysql.QueryForCheck(userId, toUserUid)
	if total != 0 {
		err := mysql.UpdateFollower(userId, toUserUid, actionType)
		if err != nil {
			c.JSON(200, &follower_gorm.CreateFollowerResponse{StatusCode: follower_gorm.Code_TokenErr, StatusMsg: "非法参数action_type"})
			return
		}
		if actionType == 1 {
			resp.StatusMsg = "关注成功"
		}
		if actionType == 2 {
			resp.StatusMsg = "取消关注成功"
		}

	}
	if total == 0 {
		//在follower表中创建记录
		if err = mysql.CreateFollower([]*model.Follower{
			{
				UserUid:    userId,
				ToUserUid:  toUserUid,
				CreateTime: currentTime,
				UpdateTime: currentTime,
				IsDeleted:  false,
			},
		}); err != nil {
			c.JSON(200, &follower_gorm.CreateFollowerResponse{StatusCode: follower_gorm.Code_DBErr, StatusMsg: "数据库创建失败"})
			return
		}
		resp.StatusMsg = "关注成功"
	}

	resp.StatusCode = follower_gorm.Code_Success

	c.JSON(consts.StatusOK, resp)
}

// QueryFollowList .
// @router /douyin/relatioin/follow/list/ [GET]
func QueryFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req follower_gorm.QueryFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(200, &follower_gorm.QueryFollowListResponse{StatusCode: follower_gorm.Code_ParamInvalid, StatusMsg: "非法参数"})
		return
	}

	//鉴权
	_, err = util.CheckToken(req.GetToken())
	if err != nil {
		c.JSON(200, &follower_gorm.QueryFollowListResponse{StatusCode: follower_gorm.Code_TokenErr, StatusMsg: "token验证失败"})
		return
	}
	//从请求获取uid
	userId := req.GetUserID()
	parseInt, err := strconv.ParseInt(userId, 10, 64)
	if err != nil {
		c.JSON(200, &follower_gorm.QueryFollowListResponse{StatusCode: follower_gorm.Code_RTErr, StatusMsg: err.Error()})
		return
	}
	//查询关注列表
	followList, _, err := mysql.QueryFollow(parseInt)
	if err != nil {
		c.JSON(200, &follower_gorm.QueryFollowListResponse{StatusCode: follower_gorm.Code_DBErr, StatusMsg: err.Error()})
		return
	}

	resp := new(follower_gorm.QueryFollowListResponse)

	var userList = resp.GetUserList()

	for _, value := range followList {
		//创建载体对象
		var userSingle follower_gorm.User
		//查询出的关注对象
		follower := value
		//获取关注对象uid
		uid := follower.ToUserUid

		//查询关注对象的关注总数
		_, followCount, err := mysql.QueryFollow(uid)
		if err != nil {
			c.JSON(200, &follower_gorm.QueryFollowListResponse{StatusCode: follower_gorm.Code_DBErr, StatusMsg: err.Error()})
			return
		}
		//查询关注对象的粉丝总数
		_, followerCount, err := mysql.QueryFollower(uid)
		if err != nil {
			c.JSON(200, &follower_gorm.QueryFollowListResponse{StatusCode: follower_gorm.Code_DBErr, StatusMsg: err.Error()})
			return
		}
		//查询关注对象信息
		user, err := mysql.QueryUserByUid(uid)
		if err != nil {
			c.JSON(200, &follower_gorm.QueryFollowListResponse{StatusCode: follower_gorm.Code_DBErr, StatusMsg: err.Error()})
			return
		}
		// 查询用户点赞视频数
		favoriteCount := mysql.QueryNumOfVideoFavoriteByUser(uid)
		// 查询用户视频被点赞数
		totalFavorited, err := mysql.QueryNumOfFavoriteGotByUser(uid)
		if err != nil {
			return
		}
		workCount := mysql.QueryVideoNumFromUser(uid)
		//数据装配
		userSingle.IsFollow = true
		userSingle.Name = user.Name
		userSingle.ID = uid
		userSingle.FollowCount = followCount
		userSingle.FollowerCount = followerCount
		userSingle.Avatar = user.PortraitPath
		userSingle.BackgroundImage = user.BackgroundPicturePath
		userSingle.Signature = user.Signature
		userSingle.FavoriteCount = favoriteCount
		userSingle.TotalFavorited = totalFavorited
		userSingle.WorkCount = workCount
		userList = append(userList, &userSingle)
	}
	resp.UserList = userList

	resp.StatusCode = follower_gorm.Code_Success
	resp.StatusMsg = "请求正常"

	c.JSON(200, resp)
}

// QueryFollowerList .
// @router /douyin/relation/follower/list/ [GET]
func QueryFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req follower_gorm.QueryFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	//鉴权
	_, err = util.CheckToken(req.GetToken())
	if err != nil {
		c.JSON(200, &follower_gorm.QueryFollowerListResponse{StatusCode: follower_gorm.Code_TokenErr, StatusMsg: "token验证失败"})
		return
	}
	//从请求获取uid
	userId := req.GetUserID()
	parseInt, err := strconv.ParseInt(userId, 10, 64)
	if err != nil {
		c.JSON(200, &follower_gorm.QueryFollowerListResponse{StatusCode: follower_gorm.Code_RTErr, StatusMsg: err.Error()})
		return
	}
	//查询粉丝列表
	followList, _, err := mysql.QueryFollower(parseInt)
	if err != nil {
		c.JSON(200, &follower_gorm.QueryFollowerListResponse{StatusCode: follower_gorm.Code_DBErr, StatusMsg: err.Error()})
		return
	}

	resp := new(follower_gorm.QueryFollowerListResponse)

	var userList = resp.GetUserList()

	for _, value := range followList {
		//创建载体对象
		var userSingle follower_gorm.User
		//查询出的关注对象
		follower := value
		//获取关注对象uid
		uid := follower.ToUserUid

		//查询关注对象的关注总数
		_, followCount, err := mysql.QueryFollow(uid)
		if err != nil {
			c.JSON(200, &follower_gorm.QueryFollowerListResponse{StatusCode: follower_gorm.Code_DBErr, StatusMsg: err.Error()})
			return
		}
		//查询关注对象的粉丝总数
		_, followerCount, err := mysql.QueryFollower(uid)
		if err != nil {
			c.JSON(200, &follower_gorm.QueryFollowerListResponse{StatusCode: follower_gorm.Code_DBErr, StatusMsg: err.Error()})
			return
		}
		//查询关注对象信息
		user, err := mysql.QueryUserByUid(uid)
		if err != nil {
			c.JSON(200, &follower_gorm.QueryFollowerListResponse{StatusCode: follower_gorm.Code_DBErr, StatusMsg: err.Error()})
			return
		}
		// 查询用户点赞视频数
		favoriteCount := mysql.QueryNumOfVideoFavoriteByUser(uid)
		// 查询用户视频被点赞数
		totalFavorited, err := mysql.QueryNumOfFavoriteGotByUser(uid)
		if err != nil {
			return
		}
		workCount := mysql.QueryVideoNumFromUser(uid)
		//数据装配
		userSingle.IsFollow = true
		userSingle.Name = user.Name
		userSingle.ID = uid
		userSingle.FollowCount = followCount
		userSingle.FollowerCount = followerCount
		userSingle.Avatar = user.PortraitPath
		userSingle.BackgroundImage = user.BackgroundPicturePath
		userSingle.Signature = user.Signature
		userSingle.FavoriteCount = favoriteCount
		userSingle.TotalFavorited = totalFavorited
		userSingle.WorkCount = workCount
		userList = append(userList, &userSingle)
	}
	resp.UserList = userList

	resp.StatusCode = follower_gorm.Code_Success
	resp.StatusMsg = "请求正常"

	c.JSON(200, resp)
}
