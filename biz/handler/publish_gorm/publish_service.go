// Code generated by hertz generator.

package publish_gorm

import (
	"bytes"
	"context"
	"github.com/DodiNCer/tiktok/biz/dal/mysql"
	"github.com/DodiNCer/tiktok/biz/model"
	"github.com/DodiNCer/tiktok/biz/model/favorite_gorm"
	"github.com/DodiNCer/tiktok/biz/model/follower_gorm"
	"github.com/DodiNCer/tiktok/biz/model/publish_gorm"
	"github.com/DodiNCer/tiktok/biz/mw"
	"github.com/DodiNCer/tiktok/biz/util"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// PublishList .
// @router /douyin/publish/list/ [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req publish_gorm.PublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	reqUserId := req.UserID
	token := req.Token

	if err != nil {
		c.JSON(consts.StatusOK, &favorite_gorm.FavoriteActionResponse{
			StatusCode: follower_gorm.Code_RTErr,
			StatusMsg:  err.Error(),
		})
	}

	key, err := util.CheckToken(token)

	userId := key.UserId
	if err != nil {
		c.JSON(consts.StatusOK, &favorite_gorm.FavoriteActionResponse{
			StatusCode: follower_gorm.Code_RTErr,
			StatusMsg:  err.Error(),
		})
	}
	//验证参数里的id和token的id一致
	if reqUserId != userId {
		c.JSON(consts.StatusOK, &favorite_gorm.FavoriteActionResponse{
			StatusCode: follower_gorm.Code_RTErr,
			StatusMsg:  err.Error(),
		})
	}

	var videoListRes []*favorite_gorm.Video

	var videoList []*model.Video
	var user *model.User
	var followCount int64
	var followerCount int64
	var favoriteCount int64
	var commentCount int64
	var isbool int64
	//数据库操作
	err = func() error {
		if user, err = mysql.QueryUserByUid(userId); err != nil {
			return err
		}
		//查找视频作者关注总数
		if _, followCount, err = mysql.QueryFollow(user.Id); err != nil {
			return err
		}
		//查找视频作者粉丝总数
		if _, followerCount, err = mysql.QueryFollower(user.Id); err != nil {
			return err
		}
		userRes := &follower_gorm.User{
			ID:            user.Id,
			Name:          user.Name,
			FollowCount:   followCount,
			FollowerCount: followerCount,
			IsFollow:      false,
		}

		if videoList, err = mysql.QueryVideoList(userId); err != nil {
			return err
		}
		for _, video := range videoList {
			if favoriteCount, err = mysql.QueryFavoriteNumByVideo(video.Id); err != nil {
				return err
			}
			if commentCount, err = mysql.QueryCommentCountByVideo(video.Id); err != nil {
				return err
			}
			if isbool, err = mysql.QueryFavoriteIs(userId, video.Id); err != nil {
				return err
			}
			videoListRes = append(videoListRes, &favorite_gorm.Video{
				ID:            video.Id,
				Author:        userRes,
				PlayURL:       video.Path,
				CoverURL:      video.CoverPath,
				FavoriteCount: favoriteCount,
				CommentCount:  commentCount,
				IsFavorite: func() bool {
					if isbool == 1 {
						return true
					} else {
						return false
					}
				}(),
				Title: video.Title,
			})
		}
		return nil
	}()
	if err != nil {
		c.JSON(consts.StatusOK, &favorite_gorm.FavoriteActionResponse{
			StatusCode: follower_gorm.Code_DBErr,
			StatusMsg:  err.Error(),
		})
	}

	resp := new(publish_gorm.PublishListResponse)
	resp.VideoList = videoListRes
	c.JSON(consts.StatusOK, resp)
}

// PublishAction .
// @router /douyin/publish/action/ [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req publish_gorm.PublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	token := req.Token
	data := req.Data
	title := req.Title
	if err != nil {
		c.JSON(consts.StatusOK, &favorite_gorm.FavoriteActionResponse{
			StatusCode: follower_gorm.Code_RTErr,
			StatusMsg:  err.Error(),
		})
	}

	key, err := util.CheckToken(token)

	id := key.UserId

	user, err := mysql.QueryUserByUid(id)
	if err != nil || user.Id == 0 {
		c.JSON(consts.StatusOK, &favorite_gorm.FavoriteActionResponse{
			StatusCode: follower_gorm.Code_DBErr,
			StatusMsg:  err.Error(),
		})
	}

	//上传视频
	videoReader := bytes.NewReader(data)

	videoName, err := util.MinioUploadVideo(videoReader, videoReader.Size())
	if err != nil {
		c.JSON(consts.StatusOK, &favorite_gorm.FavoriteActionResponse{
			StatusCode: follower_gorm.Code_DBErr,
			StatusMsg:  err.Error(),
		})
	}

	//获取视频封面

	//上传视频封面
	var coverReader *bytes.Reader
	photo, err := util.MinioUploadPhoto(coverReader, coverReader.Size())
	if err != nil {
		c.JSON(consts.StatusOK, &favorite_gorm.FavoriteActionResponse{
			StatusCode: follower_gorm.Code_DBErr,
			StatusMsg:  err.Error(),
		})
	}

	//将相关信息写入数据库
	err = mysql.CreatVideo(id, title, videoName+mw.MinioLinkPrefix, photo+mw.MinioLinkPrefix)
	if err != nil {
		c.JSON(consts.StatusOK, &favorite_gorm.FavoriteActionResponse{
			StatusCode: follower_gorm.Code_DBErr,
			StatusMsg:  err.Error(),
		})
	}

	resp := new(publish_gorm.PublishActionResponse)
	resp.StatusCode = 0
	resp.StatusMsg = "上传视频成功"
	c.JSON(consts.StatusOK, resp)
}
