// Code generated by hertz generator.

package friend_talk_message_gorm

import (
	"context"
	"github.com/DodiNCer/tiktok/biz/dal/mysql"
	"github.com/DodiNCer/tiktok/biz/model"
	friend_talk_message_gorm "github.com/DodiNCer/tiktok/biz/model/friend_talk_message_gorm"
	"github.com/DodiNCer/tiktok/biz/util"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// GetChatMessage .
// @router /douyin/message/chat/ [GET]
func GetChatMessage(ctx context.Context, c *app.RequestContext) {
	var err error
	var req friend_talk_message_gorm.GetChatMessageRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, &friend_talk_message_gorm.GetChatMessageResponse{StatusCode: friend_talk_message_gorm.Code_ParamInvalid, StatusMsg: err.Error()})
		return
	}

	key, err := util.CheckToken(req.Token) //校验token
	if err != nil {
		c.JSON(consts.StatusOK, &friend_talk_message_gorm.GetChatMessageResponse{StatusCode: friend_talk_message_gorm.Code_ParamInvalid, StatusMsg: err.Error()})
		return
	}
	userId := key.UserId

	messages, err := mysql.QueryMessageAfterCheck(userId, req.PreMsgTime)
	if err != nil {
		c.JSON(consts.StatusOK, &friend_talk_message_gorm.GetChatMessageResponse{StatusCode: friend_talk_message_gorm.Code_DBErr, StatusMsg: err.Error()})
		return
	}

	resp := new(friend_talk_message_gorm.GetChatMessageResponse)

	messageList := resp.GetMessageList()
	for _, msg := range messages {
		msgId := msg.Id
		lserId := msg.Listener_Id
		msgText := msg.Text
		cretedAt := msg.CreatedAt
		recId := msg.Receiver_Id
		var message friend_talk_message_gorm.Message
		message.ID = msgId
		message.Content = msgText
		message.CreateTime = cretedAt.String()
		message.FromUserID = recId
		message.ToUserID = lserId
		messageList = append(messageList, &message)
	}

	c.JSON(consts.StatusOK, resp)
}

// PostMessageAction .
// @router /douyin/message/action/ [POST]
func PostMessageAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req friend_talk_message_gorm.PostMessageActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, &friend_talk_message_gorm.PostMessageActionResponse{StatusCode: friend_talk_message_gorm.Code_ParamInvalid, StatusMsg: err.Error()})
		return
	}

	key, err := util.CheckToken(req.Token) //校验token
	if err != nil {
		c.JSON(consts.StatusOK, &friend_talk_message_gorm.GetChatMessageResponse{StatusCode: friend_talk_message_gorm.Code_ParamInvalid, StatusMsg: err.Error()})
		return
	}
	userId := key.UserId

	if req.ActionType != 1 {
		c.JSON(consts.StatusOK, &friend_talk_message_gorm.GetChatMessageResponse{StatusCode: friend_talk_message_gorm.Code_ParamInvalid})
		return
	}

	msg := model.Message{Receiver_Id: req.ToUserID, Listener_Id: userId, Text: req.Content}
	var msgs []*model.Message
	msgs = append(msgs, &msg)
	err = mysql.CreateMessage(msgs)
	if err != nil {
		c.JSON(consts.StatusOK, &friend_talk_message_gorm.GetChatMessageResponse{StatusCode: friend_talk_message_gorm.Code_DBErr, StatusMsg: err.Error()})
		return
	}

	resp := new(friend_talk_message_gorm.PostMessageActionResponse)

	c.JSON(consts.StatusOK, resp)
}
